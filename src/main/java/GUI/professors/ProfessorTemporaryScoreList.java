package GUI.professors;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import GUI.MainFrame;
import client.Client;
import shared.model.*;
import shared.model.users.Professor;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class ProfessorTemporaryScoreList extends javax.swing.JPanel {
  MainFrame mainFrame;
  Client client;
  Professor professor;
  Course course;

  /**
   * Creates new form ProfessorTemporaryScoureList
   */
  public ProfessorTemporaryScoreList(MainFrame mainFrame, Professor professor, Course course) {
    this.mainFrame = mainFrame;
    this.professor = professor;
    this.course = course;
    setBounds(200, 270, 1100, 700);
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">
  private void initComponents() {

    backButton = new javax.swing.JButton();
    nameLabel = new javax.swing.JLabel();
    idLabel = new javax.swing.JLabel();
    facultyLabel = new javax.swing.JLabel();
    creditLabel = new javax.swing.JLabel();
    gradeLabel = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    studentTable = new javax.swing.JTable();
    temporaryButton = new javax.swing.JButton();
    finalButton = new javax.swing.JButton();

    backButton.setText("back");
    backButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        backButtonActionPerformed(evt);
      }
    });

    nameLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    nameLabel.setText("name: " + (course.getName()==null ? "" : course.getName()));

    idLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    idLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    idLabel.setText("id: " + course.getId());

    facultyLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    facultyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    facultyLabel.setText("faculty: " + (course.getFacultyName()==null ? "" : course.getFacultyName()));

    creditLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    creditLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    creditLabel.setText("credit: " + course.getCredit());

    gradeLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    gradeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    gradeLabel.setText("grade: " + (course.getGrade()==null ? "" : course.getGrade().name()));

    studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
    ));
    jScrollPane1.setViewportView(studentTable);
    studentTable.setModel(new DefaultTableModel() {
      @Override
      public boolean isCellEditable(int row, int column) {
        if (column == 5 || column == 6) {
          return true;
        }
        return false;
      }
    });
    showData();

    temporaryButton.setText("temporary submit");
    temporaryButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        temporaryButtonActionPerformed(evt);
      }
    });

    finalButton.setText("final submit");
    finalButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        finalButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(finalButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(facultyLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(creditLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(gradeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(idLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(temporaryButton, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE))
                                            .addGap(856, 856, 856))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addContainerGap(284, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap()))
    );
    layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(42, 42, 42)
                            .addComponent(idLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addGap(38, 38, 38)
                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(43, 43, 43)
                            .addComponent(facultyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(40, 40, 40)
                            .addComponent(creditLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(43, 43, 43)
                            .addComponent(gradeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(38, 38, 38)
                            .addComponent(temporaryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(finalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(82, 82, 82))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap(37, Short.MAX_VALUE)))
    );
  }// </editor-fold>

  private void showData() {
    DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
    String[] cols = {"id", "name", "faculty", "grade", "objection", "answer", "score"};
//    String[][] data = Controller.getInstance().getStudentsTemporaryScoreDataByCourse(course);
//    model.setDataVector(data, cols);
  }

  private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {
    if (professor.getPosition()!=null && professor.getPosition().equals(Professor.Position.eduAssistant)) {
//   todo   mainFrame.setContentPane(new EduAssistantPanel(mainFrame, professor, new ProfessorsCourseList(mainFrame, professor)));
      mainFrame.repaintFrame();
      return;
    }
    mainFrame.setContentPane(new ProfessorPanel(mainFrame, new ProfessorsCourseList(mainFrame, professor), client));
    mainFrame.repaintFrame();
  }

  private void temporaryButtonActionPerformed(java.awt.event.ActionEvent evt) {
    for (int i = 0; i < studentTable.getModel().getRowCount(); i++) {
      if (studentTable.getModel().getValueAt(i, 6) == null ||
              studentTable.getModel().getValueAt(i, 6).toString().equals("")) {
        JOptionPane.showMessageDialog(mainFrame, "input all scores");
        return;
      }
    }
    for (int i = 0; i < studentTable.getModel().getRowCount(); i++) {
      try {
        Double.parseDouble(studentTable.getModel().getValueAt(i, 6).toString());
      } catch (Exception e) {
        JOptionPane.showMessageDialog(mainFrame, "scores must be numbers");
        return;
      }
    }
    for (int i = 0; i < studentTable.getModel().getRowCount(); i++) {
      double score = Double.parseDouble(studentTable.getModel().getValueAt(i, 6).toString());
      if (score < 0 || score > 20) {
        JOptionPane.showMessageDialog(mainFrame, "scores must be between 0 and 20");
        return;
      }
    }

    for (int i = 0; i < studentTable.getModel().getRowCount(); i++) {
//      Controller.getInstance().addTemporaryScore(studentTable.getModel().getValueAt(i, 0).toString(),
//              String.valueOf(course.getId()), null, studentTable.getModel().getValueAt(i, 5)==null
//                      ? "" : studentTable.getModel().getValueAt(i, 5).toString(), studentTable.getModel()
//                      .getValueAt(i, 6)==null ? "" : studentTable.getModel().getValueAt(i, 6).toString());
    }

    if (professor.getPosition()!=null && professor.getPosition().equals(Professor.Position.eduAssistant)) {
//   todo   mainFrame.setContentPane(new EduAssistantPanel(mainFrame, professor, new ProfessorTemporaryScoreList(mainFrame, professor, course)));
      mainFrame.repaintFrame();
      return;
    }
    mainFrame.setContentPane(new ProfessorPanel(mainFrame, new ProfessorTemporaryScoreList(mainFrame, professor, course), client));
    mainFrame.repaintFrame();
  }

  private void finalButtonActionPerformed(java.awt.event.ActionEvent evt) {
//    if (studentTable.getModel().getRowCount() == Controller.getInstance().findTemporaryScoreByCourse(course).length) {
//      Controller.getInstance().setFinalScores(course);
//      JOptionPane.showMessageDialog(mainFrame, "scores submitted");
//      if (professor.getPosition()!=null && professor.getPosition().equals(Professor.Position.eduAssistant)) {
//    todo    mainFrame.setContentPane(new EduAssistantPanel(mainFrame, professor, new ProfessorsCourseList(mainFrame, professor)));
//        mainFrame.repaintFrame();
//        return;
//      }
//      mainFrame.setContentPane(new ProfessorPanel(mainFrame, new ProfessorsCourseList(mainFrame, professor), client));
//      mainFrame.repaintFrame();
//    } else {
//      JOptionPane.showMessageDialog(mainFrame, "scores must submit temporary first");
//    }
  }


  // Variables declaration - do not modify
  private javax.swing.JButton backButton;
  private javax.swing.JLabel creditLabel;
  private javax.swing.JLabel facultyLabel;
  private javax.swing.JButton finalButton;
  private javax.swing.JLabel gradeLabel;
  private javax.swing.JLabel idLabel;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JLabel nameLabel;
  private javax.swing.JTable studentTable;
  private javax.swing.JButton temporaryButton;
  // End of variables declaration
}
